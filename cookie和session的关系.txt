
一、Cookie

http协议本身是一种无状态的协议，不能进行登录验证。cookie是对http协议的扩展。
cookie是一种浏览器缓存技术，能让服务器在用户的浏览器中存储数据，由服务器端生成，发送给User-Agent（一般是浏览器），服务端可以在响应头中添加 Set-Cookie 字段，将cookie值发送给客户端，浏览器在收到这个响应时，会自动将cookie保存起来，浏览器会将Cookie的key/value保存到某个目录下的文本文件内，以后每次发送请求时，会将这个cookie附带在请求头的Cookie字段中发给服务器。

cookie是按照域名分别存储的，从A域得到的cookie只会发送回A域。
协议名、域名(IP)、端口号，三者有一个不同，就算是不同的域。

cookie分为临时cookie和长久cookie。
如果一个cookie没有设置有效期，那么浏览器在关闭时就会删除这个cookie，这种cookie叫做临时cookie
如果cookie设置了有效期，那么浏览器会一直保存这个cookie，直到有效期为止，这种cookie叫做长久cookie。

cookie用于存储 web 页面的用户信息。常用于存储用户的登录信息。



------------------------------------------------------------------------------------------------------------



二、Token

token表示令牌，用户的登录凭证。

基于 Token 的身份验证方法
使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：
客户端使用用户名跟密码请求登录
服务端收到请求，去验证用户名与密码
验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端
客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里
客户端每次向服务端请求资源的时候需要带着服务端签发的 Token
服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据

qwertyuiopasdfghjklzxcvbnm1234567890


Token 的身份验证
很多大型网站也都在用，比如 Facebook，Twitter，Google+，Github 等等，比起传统的身份验证方法，Token 扩展性更强，也更安全点，非常适合用在 Web 应用或者移动应用上。Token 的中文有人翻译成 “令牌”，我觉得挺好，意思就是，你拿着这个令牌，才能过一些关卡。

传统身份验证的方法

HTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。

解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。

我们需要在服务端存储为登录的用户生成的 Token ，这些 Token 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Token 。



------------------------------------------------------------------------------------------------------------



三、Session

1.什么是session
session是保存在服务器端的会话。session的典型应用场景是用户登录某网站之后，将其登录信息放入session，在以后的每次请求中查询相应的登录信息以确保该用户合法。比如购物车等等经典场景


2.为什么使用 session 
谈及session一般是在web应用的背景之下，我们知道web应用是基于HTTP协议的，而HTTP协议恰恰是一种无状态协议。也就是说，用户从A页面跳转到B页面会重新发送一次HTTP请求，而服务端在返回响应的时候是无法获知该用户在请求B页面之前做了什么的。

而正是这种web动态化的需求，给HTTP协议提出了一个难题：一个无状态的协议怎样才能关联两次连续的请求呢？也就是说无状态的协议怎样才能满足有状态的需求呢？

此时有状态是必然趋势而协议的无状态性也是木已成舟，因此我们需要一些方案来解决这个矛盾，来保持HTTP连接状态，于是出现了cookie和session。

session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而session运行在服务器端，session保存在服务器上
当客户端第一次访问服务器时，可以将客户的登录信息保存。当客户端再次访问时，可以从该Session中查找该客户的信息，判断客户的登录状态，做出提示，相当于登录拦截。

session可以和数据库等结合做持久化操作，当服务器挂掉时也不会导致某些客户信息（购物车）丢失。


3.session的工作流程： 
当浏览器访问服务器并发送第一次请求时，服务器端会创建一个session对象，生成一个类似于key/value的键值对， 然后将key(cookie)返回到浏览器(客户)端，浏览器下次再访问时，携带key(cookie)，找到对应的session(value)。 客户的信息都保存在session中。 


4.session的生命周期：
由于session是存在服务器端数据库的，所以的它的生命周期可以持久化，而不仅限于浏览器关闭的时间。具体是由cookie.maxAge 决定：如果maxAge设定是1个小时，那么从这个因浏览器访问服务器导致session创建开始后，session会一直保存在服务器端，即使浏览器关闭，session也会继续存在。如果此时服务器宕机，只要开机后数据库没发生不可逆转的破坏，maxAge时间没过期，那么session是可以继续保持的。

当maxAge时间过期后，session会自动的数据库中移除，对应的还有浏览器的cookie。不过，由于connect-mongo的特殊机制（每1分钟检查一次过期session），session的移除可能在时间上会有一定的滞后。

当然，由于cookie是由浏览器厂商实现的，cookie不具有跨浏览器的特性，例如，我用firefox浏览器在京东上购物时，勾选了2周内免密码输入，但是当我第一次用IE登陆京东时，同样要重新输入密码。所以，这对服务器的同一个操作，不同的浏览器发起的请求，会产生不同的session-cookie。



------------------------------------------------------------------------------------------------------------



四、session与cookie的关系
上面提到解决HTTP协议自身无状态的方式有cookie和session。二者都能记录状态，前者是将状态数据保存在客户端，后者则保存在服务端。

安全性
cookie将信息保存在客户端，如果不进行加密的话，无疑会暴露一些隐私信息，安全性很差，一般情况下敏感信息是经过加密后存储在cookie中，但很容易就会被窃取。而session只会将信息存储在服务端，如果存储在文件或数据库中，也有被窃取的可能，只是可能性比cookie小了太多。

Session安全性方面比较突出的是存在会话劫持的问题，这是一种安全威胁，总体来讲，session的安全性要高于cookie



------------------------------------------------------------------------------------------------------------



五、Cookie和session由于实现手段不同，因此也各有优缺点和各自的应用场景：

1.应用场景
Cookie的典型应用场景是Remember Me服务，即用户的账户信息通过cookie的形式保存在客户端，当用户再次请求匹配的URL的时候，账户信息会被传送到服务端，交由相应的程序完成自动登录等功能。当然也可以保存一些客户端信息，比如页面布局以及搜索历史等等。
Session的典型应用场景是用户登录某网站之后，将其登录信息放入session，在以后的每次请求中查询相应的登录信息以确保该用户合法。当然还是有购物车等等经典场景；

2.安全性
cookie将信息保存在客户端，如果不进行加密的话，无疑会暴露一些隐私信息，安全性很差，一般情况下敏感信息是经过加密后存储在cookie中，但很容易就会被窃取。而session只会将信息存储在服务端，如果存储在文件或数据库中，也有被窃取的可能，只是可能性比cookie小了太多。
Session安全性方面比较突出的是存在会话劫持的问题，这是一种安全威胁，这在下文会进行更详细的说明。总体来讲，session的安全性要高于cookie；

3.性能
Cookie存储在客户端，消耗的是客户端的I/O和内存，而session存储在服务端，消耗的是服务端的资源。但是session对服务器造成的压力比较集中，而cookie很好地分散了资源消耗，就这点来说，cookie是要优于session的；

4.时效性
Cookie可以通过设置有效期使其较长时间内存在于客户端，而session一般只有比较短的有效期（用户主动销毁session或关闭浏览器后引发超时）；

5.其他
Cookie的处理在开发中没有session方便。而且cookie在客户端是有数量和大小的限制的，而session的大小却只以硬件为限制，能存储的数据无疑大了太多。



------------------------------------------------------------------------------------------------------------

服务器中Cookie的使用

1. cookie的创建
res.cookie(name, value [, options]);
name: 类型为String
value: 类型为String和Object，如果是Object会在cookie.serialize()之前自动调用JSON.stringify对其进行处理
Option: 类型为对象，可使用的属性如下
    domain：cookie在什么域名下有效，类型为String,。默认为网站域名
    expires: cookie过期时间，类型为Date。如果没有设置或者设置为0，那么该cookie只在这个这个session有效，即关闭浏览器后，这个cookie会被浏览器删除。
    httpOnly: 只能被web server访问，类型Boolean。
    maxAge: 实现expires的功能，设置cookie过期的时间，类型为String，指明从现在开始，多少毫秒以后，cookie到期。
    path: cookie在什么路径下有效，默认为'/'，类型为String
    secure：只能被HTTPS使用，类型Boolean，默认为false
    signed:使用签名，类型Boolean，默认为false。express会使用req.secret来完成签名，需要cookie-parser配合使用
 
2. cookie的删除
express直接提供了api删除浏览器中的cookie,只需要在需要使用的地方调用如下api即可
    res.clearCookie(name [, options]);

    